#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

env () {
	configure () {
		mkdir -p env
		dbname=`jq -r '.mysql.dbname' config/$1.json`
		app_user=`jq -r '.mysql.app.user' config/$1.json`
		app_password=`jq -r '.mysql.app.password' config/$1.json`
		builder_user=`jq -r '.mysql.builder.user' config/$1.json`
		builder_password=`jq -r '.mysql.builder.password' config/$1.json`

		host=`jq -r '.mysql.host' config/$1.json`
		port=`jq -r '.mysql.port' config/$1.json`
		protocol=`jq -r '.mysql.protocol' config/$1.json`

		echo "MYSQL_DATABASE=$dbname" > env/$1.env
		echo "MYSQL_APP_USER=$app_user" >> env/$1.env
		echo "MYSQL_APP_PASSWORD=$app_password" >> env/$1.env
		echo "MYSQL_BUILDER_USER=$builder_user" >> env/$1.env
		echo "MYSQL_BUILDER_PASSWORD=$builder_password" >> env/$1.env
		echo "MYSQL_HOST=$host" >> env/$1.env
		echo "MYSQL_PORT=$port" >> env/$1.env
		echo "MYSQL_PROTOCOL=$protocol" >> env/$1.env
	}

	setup () {
		cp env/$1.env env/current.env
	}

	_load () {
		export $(grep -v '^#' env/$1.env | xargs -0)
	}

	if [[ $(type -t $1) == function ]]; then
		$@
		return $?
	fi

	configure $1
	setup $1
}

_connect_for_user () {
	mysql -u $1 -p$2 -h $MYSQL_HOST --port=$MYSQL_PORT --protocol=$MYSQL_PROTOCOL
}

connect () {
	env _load current
	_connect_for_user $MYSQL_APP_USER $MYSQL_APP_PASSWORD
}

build () {
	file () {
		env _load current
		echo "Building $1..."
		cat $1 | _connect_for_user $MYSQL_BUILDER_USER $MYSQL_BUILDER_PASSWORD && echo -e

		if [ $? -ne 0 ]
		then
			echo -e "Build $1: ${RED}FAILURE${NC}"
			exit 1
		fi

		echo -e "Build $1: ${GREEN}SUCCESS${NC}"
	}

	_folder () {
		for entry in $1/*.sql; do
			build file $entry
		done
	}

	if [[ $(type -t $1) == function ]]; then
		$@
		return $?
	fi

	for subdirectory in "tables" "utils" "constraints"; do
		build _folder $subdirectory
	done

	for entry in sprocs/*; do
		build _folder $entry
	done
}

generate_initdb () {
	env configure docker
	env _load docker

	mkdir -p initdb
	rm -f initdb/script.sql

	for entry in admin/*; do
		envsubst < $entry >> initdb/script.sql
	done

	for subdirectory in "tables" "utils" "constraints"; do
		_add_to_initdb $subdirectory
	done

	for entry in sprocs/*; do
		_add_to_initdb $entry
	done
}

_add_to_initdb () {
	for entry in $1/*.sql; do
		awk 1 $entry >> initdb/script.sql
	done
}

$@